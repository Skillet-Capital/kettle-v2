import { Signer, JsonRpcProvider, JsonRpcSigner, Addressable } from "ethers";
import type { KettleContract, CreateMarketOfferInput, MarketOffer, CreateLoanOfferInput, LoanOffer, Numberish, Lien, EscrowStruct, CurrentDebt, TakeOfferInput, SendStep, SignStep } from "./types";
export declare class Kettle {
    contract: KettleContract;
    contractAddress: string;
    iface: any;
    lendingIface: any;
    private provider;
    private signer?;
    constructor(_providerOrSigner: JsonRpcProvider | Signer | JsonRpcSigner, _contractAddress: string);
    connect(_providerOrSigner: JsonRpcProvider | Signer | JsonRpcSigner): Kettle;
    createMarketOffer(input: CreateMarketOfferInput, maker: string | Addressable): Promise<(SendStep | SignStep)[]>;
    createLoanOffer(input: CreateLoanOfferInput, maker: string | Addressable): Promise<(SendStep | SignStep)[]>;
    takeMarketOffer(input: TakeOfferInput, taker: string | Addressable): Promise<SendStep[]>;
    takeLoanOffer(input: TakeOfferInput, taker: string | Addressable): Promise<SendStep[]>;
    escrowMarketOffer(input: TakeOfferInput, taker: string | Addressable): Promise<SendStep[]>;
    repay(lienId: Numberish, lien: Lien, payer: string | Addressable): Promise<SendStep[]>;
    claim(lienId: Numberish, lien: Lien, claimer: string | Addressable): Promise<SendStep[]>;
    validateSignature(offer: MarketOffer | LoanOffer, signature: string): Promise<void>;
    validateOffer(offer: MarketOffer | LoanOffer, lien?: Lien): Promise<void>;
    private _matchTerms;
    private _executeValidations;
    currentDebt(lien: Lien): Promise<CurrentDebt>;
    _formatMarketOffer(maker: string, input: CreateMarketOfferInput): Promise<MarketOffer>;
    _formatLoanOffer(maker: string, input: CreateLoanOfferInput): Promise<LoanOffer>;
    private _erc20Approvals;
    private _erc721Approvals;
    private _getCreateApprovalActions;
    private _getTakeApprovalActions;
    private _lendingController;
    private _escrowController;
    private _confirmTransaction;
    private _resolveAddress;
    private _getDomainData;
    private _signMarketOffer;
    private _signLoanOffer;
    private _marketOfferPayload;
    private _loanOfferPayload;
    hashOffer(offer: MarketOffer | LoanOffer): string;
    hashMarketOffer(offer: MarketOffer): string;
    hashLoanOffer(offer: LoanOffer): string;
    hashLien(lien: Lien): string;
    hashEscrow(escrow: EscrowStruct): string;
    blocktime(): Promise<any>;
    mulFee(amount: bigint | string | number, rate: bigint | string | number): bigint;
    safeFactorMul(amount: Numberish, factor: Numberish): bigint;
}
