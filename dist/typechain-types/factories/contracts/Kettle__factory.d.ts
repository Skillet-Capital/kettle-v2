import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Kettle, KettleInterface } from "../../contracts/Kettle";
type KettleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Kettle__factory extends ContractFactory {
    constructor(...args: KettleConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Kettle & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Kettle__factory;
    static readonly bytecode = "0x60806040523461001a576040516146b661002082396146b690f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063017d0ae014610172578063050c67d91461016d57806308a8e4a31461016857806318a0a00114610163578063270c4c781461015e578063406eedd6146101595780634ae25a86146101545780635680bb7b1461014f578063627cdcb91461014a578063715018a61461014557806379ba5097146101405780637e4cf8461461013b5780637ecebe00146101365780637f99d69114610131578063819936341461012c57806389916bc5146101275780638da5cb5b1461012257806395e97eee1461011d578063cee7257814610118578063e2fdcc1714610113578063e30c39781461010e5763f2fde38b03610196576108c4565b6108a9565b61088e565b610867565b610837565b610804565b6107c9565b610731565b610716565b6106e6565b6106a6565b610652565b61063a565b610622565b6105fd565b610553565b610510565b6104b9565b610413565b610320565b6102e5565b61026d565b6001600160a01b031690565b90565b61018f81610177565b0361019657565b600080fd5b905035906101a882610186565b565b8061018f565b905035906101a8826101aa565b9190604083820312610196576101839060206101d9828661019b565b94016101b0565b61018390610177906001600160a01b031682565b610183906101e0565b610183906101f4565b90610210906101fd565b600052602052604060002090565b6101836101836101839290565b906102109061021e565b610183916008021c81565b906101839154610235565b6102646101839261025f600093603a610206565b61022b565b610240565b9052565b34610196576102996102896102833660046101bd565b9061024b565b6040519182918290815260200190565b0390f35b600091031261019657565b610183916008021c610177565b9061018391546102a8565b6101836000606e6102b5565b610269906101fd565b6020810192916101a891906102cc565b34610196576102f536600461029d565b6102996103006102c0565b604051918291826102d5565b9060208282031261019657610183916101b0565b346101965761029961028961033636600461030c565b6108f3565b90816101e09103126101965790565b909182601f83011215610196578135916001600160401b03831161019657602001926001830284011161019657565b909182601f83011215610196578135916001600160401b03831161019657602001926020830284011161019657565b919061024083820312610196576103bf81846101b0565b926103cd826020830161033b565b926102008201356001600160401b03811161019657836103ee91840161034a565b9290936102208201356001600160401b0381116101965761040f9201610379565b9091565b34610196576102996102896104293660046103a8565b94939093929192610d09565b90816102809103126101965790565b9091610300828403126101965761045b83836101b0565b9261046981602085016101b0565b926104778260408301610435565b926102c08201356001600160401b038111610196578361049891840161034a565b9290936102e08201356001600160401b0381116101965761040f9201610379565b34610196576102996102896104cf366004610444565b959490949391936112f3565b919091604081840312610196576104f2838261019b565b9260208201356001600160401b0381116101965761040f9201610379565b34610196576105296105233660046104db565b9161138b565b604051005b906020828203126101965781356001600160401b0381116101965761040f9201610379565b346101965761052961056636600461052e565b90611396565b90816101809103126101965790565b610480818303126101965761059082826101b0565b9261059e83602084016101b0565b926105ac816040850161056c565b926105bb826101c08301610435565b926104408201356001600160401b03811161019657836105dc91840161034a565b9290936104608201356001600160401b0381116101965761040f9201610379565b346101965761029961028961061336600461057b565b96959095949194939293611d63565b346101965761063236600461029d565b610529611d75565b346101965761064a36600461029d565b610529611db6565b346101965761066236600461029d565b610529611dbe565b6080818303126101965761067e828261019b565b9261018361068f846020850161019b565b93606061069f826040870161019b565b940161019b565b34610196576105296106b936600461066a565b92919091612085565b90602082820312610196576101839161019b565b6000610264610183926007610206565b34610196576102996102896106fc3660046106c2565b6106d6565b90610280828203126101965761018391610435565b346101965761029961028961072c366004610701565b612091565b34610196576102996102896107473660046103a8565b94939093929192612419565b90916103c0828403126101965761076a83836101b0565b92610778816020850161056c565b92610787826101a0830161033b565b926103808201356001600160401b03811161019657836107a891840161034a565b9290936103a08201356001600160401b0381116101965761040f9201610379565b34610196576102996102896107df366004610753565b95949094939193612ad8565b61026990610177565b6020810192916101a891906107eb565b346101965761081436600461029d565b61029961081f612ae9565b604051918291826107f4565b6101836000606f6102b5565b346101965761084736600461029d565b61029961030061082b565b906101e082820312610196576101839161033b565b346101965761029961028961087d366004610852565b612b16565b610183600060706102b5565b346101965761089e36600461029d565b610299610300610882565b34610196576108b936600461029d565b61029961081f612b1f565b34610196576105296108d73660046106c2565b612b91565b90610210565b6101839081565b61018390546108e2565b61090a61018391610902600090565b50603b6108dc565b6108e9565b6002111561019657565b634e487b7160e01b600052602160045260246000fd5b6002111561093957565b610919565b906101a88261092f565b356101838161090f565b95949392919061096182610948565b61097461096e600161093e565b9161093e565b0361098257610183966109aa565b60405163e054df3f60e01b8152600490fd5b0390fd5b80151561018f565b3561018381610998565b969594939291906000976109c86109c3602085016109a0565b151590565b891515036109db57610183979850610ac2565b88156109f4576040515b633d1b2f7960e01b8152600490fd5b604051630119ff4b60e01b8152600490fd5b61018390610177565b61018f81610a06565b3561018381610a0f565b3561018381610186565b35610183816101aa565b6101839054610a06565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117610a7757604052565b610a40565b610ab26101a894610aa8606094989795610a9e608086019a60008701906102cc565b60208501906107eb565b60408301906107eb565b0152565b6040513d6000823e3d90fd5b92610ad69491979693959295508588612bbb565b50610100810192610ae684610a18565b9160408101610b47610af782610948565b94600095610b0761096e8861093e565b03610d0357610b1860608501610a22565b88610160860191610b416020610b3a81610b338d8801610a22565b9501610a2c565b9401610a2c565b93612c7b565b8096610b6686610b5f610b5a606e610a36565b6101fd565b9201610a18565b90610b7084610948565b610b7c61096e8961093e565b03610cfc57610b8d60608601610a22565b905b610b9885610948565b610ba461096e8a61093e565b03610cea5733915b813b1561019657888094610bdd610bc260405190565b978896879586946307940ee760e01b5b865260048601610a7c565b03925af18015610cac57610cce575b50610bfa610b5a606e610a36565b610c0660c08401610a18565b92610c1083610948565b610c1c61096e8861093e565b03610cb957610c2b3393610948565b610c3761096e8861093e565b03610cb1576060610c489101610a22565b915b813b1561019657858094610c74610c6060405190565b9788968795869463e8023c3760e01b610bd2565b03925af18015610cac57610c86575050565b816101a892903d10610ca5575b610c9d8183610a56565b81019061029d565b503d610c93565b610ab6565b503391610c4a565b610c2b610cc860608301610a22565b93610948565b610ce490853d8711610ca557610c9d8183610a56565b38610bec565b610cf660608701610a22565b91610bac565b3390610b8f565b33610b18565b6101839594939291906000610952565b96959493929190610d2983610948565b610d3661096e600061093e565b03610d445761018397610d56565b60405163373b765f60e21b8152600490fd5b9796959493929190600098610d706109c3602086016109a0565b8a151503610d8357610183989950611065565b89156109f4576040516109e5565b905051906101a8826101aa565b906020828203126101965761018391610d91565b905035906101a88261090f565b50610183906020810190610db2565b6101839061093e565b61026990610dce565b905035906101a882610998565b50610183906020810190610de0565b5061018390602081019061019b565b905035906101a882610a0f565b50610183906020810190610e0b565b506101839060208101906101b0565b906040610e7a6101a893610e57610e506000830183610dbf565b8590610dd7565b610e71610e676020830183610e18565b60208601906102cc565b82810190610e27565b910152565b9060e0610e7a6101a893610ea0610e996000830183610e18565b85906102cc565b610eb7610eb06020830183610e27565b6020860152565b610ece610ec76040830183610e27565b6040860152565b610ee5610ede6060830183610e27565b6060860152565b610efc610ef56080830183610e27565b6080860152565b610f13610f0c60a0830183610e27565b60a0860152565b610e71610f2360c0830183610e27565b60c0860152565b906020610e7a6101a893610e71610f446000830183610dfc565b85906107eb565b90610260610e7a6101a893610f66610e506000830183610dbf565b610f7f610f766020830183610ded565b15156020860152565b610f99610f8f6040830183610dbf565b6040860190610dd7565b610fb3610fa96060830183610dfc565b60608601906107eb565b610fcd610fc36080830183610dfc565b60808601906107eb565b610fdf60a082015b60a0860190610e36565b610ff26101008201610100860190610e7f565b6110056102008201610200860190610f2a565b610e71611016610240830183610e27565b610240860152565b909594926101a89461105461105e9261104a60809661104361030088019c6000890152565b6020870152565b60408501906107eb565b60608301906107eb565b0190610f4b565b9561109d92949397919650604088019561107e87610948565b9560009661108e61096e8961093e565b036112df57945b89868a612d2f565b506110ab610b5a606e610a36565b6110ba83610100880101610a18565b6110c385610948565b6110cf61096e8661093e565b036112d8576110e060608801610a22565b915b6110eb86610948565b6110f761096e8761093e565b036112c65733905b803b15610196578493868094611117610bc260405190565b03925af18015610cac576112aa575b50611134610b5a606e610a36565b9161114160c08701610a18565b61114a85610948565b61115661096e8461093e565b036112985733935b61116b610b5a606f610a36565b90803b1561019657879584809461119861118460405190565b9b8c968795869463e8023c3760e01b610bd2565b03925af1948515610cac5760209561127c575b506111b9610b5a606f610a36565b926111c385610948565b6111cf61096e8461093e565b03611272576111e96111e360608901610a22565b95610948565b6111f561096e8461093e565b0361125d5761121e33975b6040515b9889978896879563bb57e30f60e01b87526004870161101e565b03925af1908115610cac57600091611234575090565b610183915060203d602011611256575b61124e8183610a56565b810190610d9e565b503d611244565b61121e61126c60608901610a22565b97611200565b6111e93395610948565b61129290823d8411610ca557610c9d8183610a56565b386111ab565b6112a460608801610a22565b9361115e565b6112c090833d8511610ca557610c9d8183610a56565b38611126565b6112d260608901610a22565b906110ff565b33916110e2565b506112ed6101208a01610a2c565b94611095565b610183969594939291906000610d19565b906101a89291611312612ebb565b611342565b634e487b7160e01b600052603260045260246000fd5b919081101561133d576020020190565b611317565b9282919060005b845b8110156113835761137c8161137661136f61136a61134b95898961132d565b610a2c565b8933612ed9565b60010190565b9050611349565b509350505050565b906101a89291611304565b909190829160005b835b8110156113cd576113c6816113766113bf61136a6113a0958a8961132d565b3333612ed9565b905061139e565b5092505050565b97969594939291906113e584610948565b6113f261096e600061093e565b03610d445761018397969594939291906000996114146109c3602087016109a0565b8b15150361142757610183999a50611612565b8a156109f4576040516109e5565b90610160610e7a6101a893611450610f446000830183610dfc565b611460610e676020830183610e18565b611470610ec76040830183610e27565b61148a6114806060830183610e18565b60608601906102cc565b61149a610ef56080830183610e27565b6114aa610f0c60a0830183610e27565b6114ba610f2360c0830183610e27565b6114d16114ca60e0830183610e27565b60e0860152565b6114ea6114e2610100830183610e27565b610100860152565b6115066114fb610120830183610dfc565b6101208601906107eb565b610e71611517610140830183610e27565b610140860152565b9081526101a0810192916101a89160200190611435565b90916060828403126101965761018361154f8484610d91565b93604061155f8260208701610d91565b9401610d91565b610180810192916101a89190611435565b905051906101a882610186565b906020828203126101965761018391611577565b634e487b7160e01b600052601160045260246000fd5b91906115b9565b9290565b82018092116115c457565b611598565b919082039182116115c457565b905051906101a882610998565b9060208282031261019657610183916115d6565b9160206101a8929493610ab2604082019660008301906107eb565b97909295939796919650611629610b5a606f610a36565b90813b1561019657600061163c60405190565b928390630ae6339760e21b825281806116598c8a6004840161151f565b03915afa918215610cac576116a892611d4d575b50604089019261167c84610948565b9860009961168c61096e8c61093e565b03611d3957955b60408901978b886116a38b610a2c565b612d2f565b506116b281610948565b868601956116d76116c288610a22565b9260608b01936116d185610a22565b91612f3f565b6116e360608201610a18565b906101008a019061171b8a8301938c6116fb86610a18565b611715602060a061170d828901610a18565b940101610a18565b92612fd2565b611728610b5a606f610a36565b91606061173460405190565b938490630833216160e11b825281806117508760048301611566565b03915afa928315610cac5760009384918291611d02575b5061177188610948565b61177e61096e600161093e565b1480611cee575b611cdc576117bd60208a61179c610b5a606f610a36565b604051938492839182916383c0e1c760e01b5b835260048301526024820190565b03915afa918215610cac578e91600093611cab575b506117dc8a610948565b6117e861096e8461093e565b03611ca4576117f689610a22565b915b6118018b610948565b61180d61096e8361093e565b03611c955733945b61181e85610177565b61182785610177565b14928315611c8357806020890161183d81610a2c565b9060808c019161185f61185b6101838661185687610a2c565b6115ae565b9190565b1115611c71576118849261185661187861187e93610a2c565b93610a2c565b906115c9565b935b15611c59575060206118978361021e565b975b016118a661018382610a2c565b600090831115611c4a57506118c36118bd82610a2c565b836115c9565b915b6118d161018383610a2c565b600090821015611c3857506118e86118ed92610a2c565b6115c9565b935b6118fc610b5a606e610a36565b906307940ee79461190c8d610a18565b611915306101fd565b93803b1561019657610bd2878961193e82968961193160405190565b998a988997889660e01b90565b03925af18015610cac57611c1c575b5061195b610b5a606e610a36565b906119658c610a18565b92823b1561019657889561198e8692610bd29461198160405190565b9c8d988997889660e01b90565b03925af1938415610cac578f94611c00575b506119aa8461021e565b8211611b99575b50506119bc8261021e565b8311611b16575b505050906020916119e66101206119df610b5a611a0f97610a18565b9201610a22565b8b6119f060405190565b809681958294611a0463a9059cbb60e01b90565b8452600484016115f7565b03925af18015610cac57611ae9575b50611a2c610b5a606f610a36565b803b1561019657611a5c8894918592611a4460405190565b9a8b9384928391906001621dc69560e21b03196117af565b03925af1968715610cac57602097611acd575b50611a8f611a89611a83610b5a606f610a36565b96610a2c565b92610948565b611a9b61096e8561093e565b03611abf57611ab5611aaf61121e92610a22565b96610a22565b9761120460405190565b5061121e611ab53396610a22565b611ae390843d8611610ca557610c9d8183610a56565b38611a6f565b611b0a9060203d602011611b0f575b611b028183610a56565b8101906115e3565b611a1e565b503d611af8565b91602091611b4a959493611b2c610b5a89610a18565b91611b3660405190565b809881958294611a0463a9059cbb60e01b90565b03925af18015610cac576101206119df610b5a611a0f976020976119e695611b7e575b5097505050829394508c91506119c3565b611b9490893d8b11611b0f57611b028183610a56565b611b6d565b90611bcb93602092611bad610b5a8b610a18565b91611bb760405190565b809781958294611a0463a9059cbb60e01b90565b03925af1918215610cac578d92611be3575b806119b1565b611bfb9060203d602011611b0f57611b028183610a56565b611bdd565b611c1690853d8711610ca557610c9d8183610a56565b386119a0565b611c3290843d8611610ca557610c9d8183610a56565b3861194d565b9050611c44915061021e565b936118ef565b611c539061021e565b916118c5565b611c6b60209161185660808c01610a2c565b97611899565b505050611c7e600061021e565b611884565b611c8f60208901610a2c565b93611886565b611c9e8a610a22565b94611815565b33916117f8565b611cce91935060203d602011611cd5575b611cc68183610a56565b810190611584565b91386117d2565b503d611cbc565b60405163e593cc8b60e01b8152600490fd5b50611cfb60208401610a2c565b8211611785565b915050611d2891935060603d606011611d32575b611d208183610a56565b810190611536565b3894929194611767565b503d611d16565b50611d476101208b01610a2c565b95611693565b611d5d906000610c9d8183610a56565b3861166d565b610183979695949392919060006113d4565b6101a833613033565b611d86612ebb565b6101a8611da4565b6101776101836101839290565b61018390611d8e565b6101a8611db16000611d9b565b6130c9565b6101a8611d7e565b33611dc7612b1f565b611dd9611dd383610177565b91610177565b03611de7576101a8906130c9565b61099490611df460405190565b63118cdaa760e01b8152918291600483016107f4565b6101839060401c5b60ff1690565b6101839054611e0a565b610183905b6001600160401b031690565b6101839054611e22565b611e276101836101839290565b906001600160401b03905b9181191691161790565b611e27610183610183926001600160401b031690565b90611e85610183611e8c92611e5f565b8254611e4a565b9055565b9060ff60401b9060401b611e55565b90611eaf610183611e8c926109c3565b8254611e90565b61026990611e3d565b6020810192916101a89190611eb6565b929091907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00938491611f10611f0a611f0685611e18565b1590565b93611e33565b93600095611f1d87611e3d565b6001600160401b038716148061201a575b600196611f4a611f3d89611e3d565b916001600160401b031690565b149081611ff6575b155b9081611fed575b50611fdb57611f849385611f7b89611f728a611e3d565b9b019a8b611e75565b611fcc57612047565b611f8d57505050565b611fbb611fc7927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294611e9f565b60405191829182611ebf565b0390a1565b611fd6878a611e9f565b612047565b60405163f92ee8a960e01b8152600490fd5b15905038611f5b565b9050611f54612004306101fd565b3b61201161185b8b61021e565b14919050611f52565b5084611f2e565b906001600160a01b0390611e55565b90612040610183611e8c926101fd565b8254612021565b6101a89392610b5a61206f61207d94610b5a61206861207696610b5a6130e6565b606e612030565b606f612030565b6070612030565b611db16130f6565b906101a8939291611ecf565b6101839061317c565b969594939291906001976120b36109c3602085016109a0565b891515036109db576101839798506121cd565b61018361271061021e565b906040610e7a6101a8936120eb610e996000830183610e18565b610e71610eb06020830183610e27565b906101c0610e7a6101a893612116610e506000830183610dbf565b612126610f766020830183610ded565b612136610f8f6040830183610dbf565b612146610fa96060830183610dfc565b612156610fc36080830183610dfc565b61216260a08201610fd5565b61217561010082016101008601906120d1565b6121886101608201610160860190610f2a565b610e716121996101a0830183610e27565b6101a0860152565b909594926101a8946110546121c69261104a60809661104361026088019c6000890152565b01906120fb565b926121df949195929693508686612bbb565b506000906121ec8261021e565b90610100840191604083018161220461018383610a2c565b11612356575b50612218610b5a606e610a36565b93612224818501610a18565b604087019461223286610948565b61223e61096e8561093e565b0361234f5761224f60608901610a22565b965b61226a6020612263610b5a6070610a36565b9301610a2c565b97813b156101965784809461229561228160405190565b9b8c96879586946307940ee760e01b610bd2565b03925af1948515610cac57602095612333575b506122b6610b5a6070610a36565b926122c085610948565b6122cc61096e8461093e565b03612329576122e06111e360608901610a22565b6122ec61096e8461093e565b036123145761121e33975b60405198899788968795632e6252c960e11b8752600487016121a1565b61121e61232360608901610a22565b976122f7565b6122e03395610948565b61234990823d8411610ca557610c9d8183610a56565b386122a8565b3396612251565b61237e915061237061236a60208601610a2c565b91610a2c565b6123786120c6565b91613281565b8061238c610b5a606e610a36565b612397868601610a18565b906123a460408901610948565b6123b061096e8961093e565b036124075733905b6123c5610b5a6070610a36565b91813b15610196578880946123dc610bc260405190565b03925af18015610cac571561220a5761240190853d8711610ca557610c9d8183610a56565b3861220a565b61241360608901610a22565b906123b8565b610183959493929190600061209a565b9695949392919061243983610948565b61244661096e600161093e565b0361098257610183969594939291906000986124676109c3602086016109a0565b8a151503610d8357610183989950979691939295909461248a610b5a606f610a36565b93843b1561019657600061249d60405190565b958690630ae6339760e21b825281806124ba8b8d6004840161151f565b03915afa948515610cac576124e195612ac2575b50876124dc60408801610a2c565b612bbb565b5060408301926124f084610948565b9161250c6124fd82610a22565b9360608401946116d186610a22565b61251860608201610a18565b610100830192906125459061252c85610a18565b61253860208601610a18565b9061171560c08601610a18565b612552610b5a606f610a36565b95602061255e60405190565b6383c0e1c760e01b81526004810188905297889060249082905afa968715610cac57600097612aa1575b5061259281610948565b966000976125a261096e8a61093e565b03612a925733955b6125b383610948565b6125bf61096e8b61093e565b03612a8a576125cd90610a22565b905b60208601916125f26101606125e385610a2c565b96019561237060208801610a2c565b97612600610b5a606f610a36565b93606061260c60405190565b958690630833216160e11b825281806126288d60048301611566565b03915afa988915610cac5760008080989197909b612a5d575b5061264b90610948565b61265861096e600161093e565b1480612a48575b611cdc578c968b8a61267088610177565b61267988610177565b14928315612a395761268a86610a2c565b60808301906126a261185b6101838561185686610a2c565b1115612a29576126bc9061187e836118566118788b610a2c565b935b15612a145750506126ce8961021e565b975b6126e0610183836118e888610a2c565b600090821115612a0557506127016126fb836118e888610a2c565b826115c9565b945b612713610183846118e884610a2c565b6000908310156129f2575061272e926118e86118e892610a2c565b945b61273d610b5a606e610a36565b98806307940ee79401996127508b610a18565b9061275a306101fd565b94813b15610196578387612775610bd2938961193160405190565b03925af1908115610cac578f916129d5575b5050612796610b5a606e610a36565b61279f89610a18565b91813b15610196578f80946127bc8897610bd29461193160405190565b03925af18015610cac576129b9575b506127d58b61021e565b8211612969575b50506127e78961021e565b82116128fd575b5050602061282e94612802610b5a84610a18565b61281461012063a9059cbb9701610a22565b8a61281e60405190565b809981958294611a048c60e01b90565b03925af1938415610cac5761285e88612857610b5a611a0495839560209a6128e2575b50610a18565b9401610a22565b9361287861286b60405190565b9788968795869460e01b90565b03925af18015610cac576128c5575b50612895610b5a606f610a36565b803b1561019657610c7483929183926128ad60405190565b94859384928391906001621dc69560e21b03196117af565b6128dd9060203d602011611b0f57611b028183610a56565b612887565b6128f8908b3d8d11611b0f57611b028183610a56565b612851565b6129309591602091612911610b5a86610a18565b908b61291c60405190565b809a81958294611a0463a9059cbb60e01b90565b03925af1908115610cac5761282e9560209261294e575b50946127ee565b61296490833d8511611b0f57611b028183610a56565b612947565b6129879160209161297c610b5a88610a18565b908d6119f060405190565b03925af18015610cac5761299c575b806127dc565b6129b49060203d602011611b0f57611b028183610a56565b612996565b6129cf908c8d3d10610ca557610c9d8183610a56565b386127cb565b816129eb92903d10610ca557610c9d8183610a56565b8d38612787565b9150506129ff915061021e565b94612730565b612a0e9061021e565b94612703565b6118566080612a239301610a2c565b976126d0565b50612a34600061021e565b6126bc565b612a4286610a2c565b936126be565b50612a568b6118e884610a2c565b861161265f565b909a50612a7f91975061264b965060603d606011611d3257611d208183610a56565b9791969a909a612641565b5033906125cf565b612a9b86610a22565b956125aa565b612abb91975060203d602011611cd557611cc68183610a56565b9538612588565b612ad2906000610c9d8183610a56565b386124ce565b610183969594939291906000612429565b61018360007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01610a36565b6101839061339c565b6101836000612b10613430565b6101a890612b38612ebb565b612b4c816000612b46613430565b01612030565b612b60612b5a610b5a612ae9565b916101fd565b907f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700612b8b60405190565b600090a3565b6101a890612b2c565b9060001990611e55565b90612bb4610183611e8c9261021e565b8254612b9a565b612c4b9296956101a895612bcd600090565b50612bdd611f06602086016109a0565b612c50575b505050612c25612bf18261339c565b9384976060840195612c0287610a22565b946101c0612c136101a08301610a2c565b910195612c1f87610a2c565b926134fa565b612c4561236a612c3e612c38600161021e565b95610a22565b603a610206565b9061022b565b612ba4565b612c739260a08501612c6d6040612c6683610948565b9201610a2c565b90613454565b388080612be2565b90929193612c9b90612c8b600090565b50612c946120c6565b9084613281565b93828511612d0d57612cb0610b5a606e610a36565b803b1561019657859460008094612cdd612cc960405190565b998a96879586946307940ee760e01b610bd2565b03925af1928315610cac5761018393612cf7575b506115c9565b612d07906000610c9d8183610a56565b38612cf1565b6040516358d620b360e01b8152600490fd5b610183620186a061021e565b0190565b94612d5592979691939495612d42600090565b5060a08901612c6d6040612c6683610948565b610100850192612d6760808501610a2c565b612d6f612d1f565b908110908115612ea0575b50612e8e57612d888661317c565b92612dcc60408598612dc66060820195612da187610a22565b95612daf6102408501610a2c565b96610260850197612dbf89610a2c565b918c6134fa565b01610948565b612dd961096e600061093e565b03612e6e575050612def61018360408501610a2c565b81118015612e57575b612e4557612e1c6020936118e8612e1361090a86603b6108dc565b95869201610a2c565b8111612e33576101a892612c4b910191603b6108dc565b60405163cfe9d93160e01b8152600490fd5b604051635697666160e01b8152600490fd5b50612e6761018360608501610a2c565b8110612df8565b9092506101a89350612c4b9150612c4561236a612c3e612c38600161021e565b604051636a43f8d160e01b8152600490fd5b9050612eb461185b6115b560a08801610a2c565b1138612d7a565b612ec3612ae9565b3390612ed1611dd383610177565b03611de75750565b612f08612f02612f0e92949394610b5a612ef3600161021e565b612c4b8761025f8a603a610206565b936101fd565b9161021e565b917f3d4f9f1802e8d452c853ecb7e67f0b2952a80ab67afd1bbe07e7b94fd46cb778612f3960405190565b600090a4565b9091612f4b600161093e565b612f548361093e565b149081612fb7575b50612fa557612f6e61096e600061093e565b149081612f8f575b50612f7d57565b60405163a616b1bf60e01b8152600490fd5b9050612f9d611dd333610177565b141538612f76565b604051633194040560e21b8152600490fd5b612fc19150610177565b612fca83610177565b141538612f5c565b90612fe2612fe891949394610a06565b91610a06565b0361301257612fe2612ff991610a06565b0361300057565b60405163238f270960e11b8152600490fd5b60405163fb42a67d60e01b8152600490fd5b60001981146115c45760010190565b613060612f08613044836007610206565b92610b5a613059613054866108e9565b613024565b8095612ba4565b907fa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b612b8b60405190565b916001600160a01b0360089290920291821b911b611e55565b91906130b5610183611e8c936101fd565b90835461308b565b6101a8916000916130a4565b6101a8906130e16000806130db613430565b016130bd565b613559565b6101a86135cc565b6101a8613625565b6101a86130ee565b99979593919c9b9a98969492909c6101808b019d60008c0161311e919052565b60208b0161312b91610dd7565b151560408a01526060890161313f91610dd7565b6080880161314c916107eb565b60a08701613159916107eb565b60c086015260e08501526101008401526101208301526101408201526101600152565b613246602061318b60046108e9565b61323a61319785610948565b946131a38482016109a0565b906131b060408201610948565b9060608101916131bf83610a22565b6131cb60808401610a22565b6131d760a0850161367b565b906131e5610100860161370c565b926131f361020087016137ae565b9461322461090a61321d6132176102606132106102408d01610a2c565b9b01610a2c565b9a610a22565b6007610206565b9861322e60405190565b9e8f9d8e019c8d6130fe565b90810382520382610a56565b613258613251825190565b9160200190565b2090565b634e487b7160e01b600052601260045260246000fd5b811561327c570490565b61325c565b9060009261328e82840290565b92600019838209848082109103036132a6600061021e565b811461338d578083111561337b5782613304946132f1936101839850098086039510900360016132de846132da600061021e565b0390565b8416808095049604938060000304010290565b179161330461330882613304600361021e565b0290565b6132da612f086133756133666133576133486133396002976133298961021e565b186133048b82026132da8b61021e565b6133048a82026132da8a61021e565b6133048982026132da8961021e565b6133048882026132da8861021e565b6133048782026132da8761021e565b80950290565b60405163227bc15360e01b8152600490fd5b50509190506101839250613272565b61324660206133ab60066108e9565b61323a6133b785610948565b946133c38482016109a0565b906133d060408201610948565b9060608101916133df83610a22565b6133eb60808401610a22565b6133f760a0850161367b565b906134056101008601613815565b9261341361016087016137ae565b9461322461090a61321d6132176101c06132106101a08d01610a2c565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b93909361346461096e600161093e565b036134cd5790611f06929161348461347e6134b59661021e565b9261021e565b6134a361349060405190565b602081019283529182906040820161323a565b6134ae613251825190565b2092613851565b6134bb57565b604051631037b7f560e11b8152600490fd5b5090506134dd61185b6134e29390565b141590565b6134e857565b60405163c1ab6dc160e01b8152600490fd5b93816135099394969295613ac1565b4211613547576135219161025f61090a92603a610206565b61352e61185b600161021e565b1461353557565b6040516305c934c360e01b8152600490fd5b604051639cb1308760e01b8152600490fd5b613593612b5a7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610b5a8461358d83610a36565b92612030565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612b8b60405190565b90612bb4610183611e8c9290565b6101a861360961361e6136026136176135fb6136106135e961431e565b60069c959a93969c98919294986135be565b60056135be565b60046135be565b60036135be565b60026135be565b60016135be565b60006135be565b613630611f066143a0565b61363657565b604051631afcd79f60e31b8152600490fd5b610ab26101a894613671606094989795613667608086019a6000870152565b6020850190610dd7565b60408301906102cc565b61324661368860016108e9565b61369183610948565b9061323a6136ad60406136a660208801610a18565b9601610a2c565b604051958694602086019485613648565b9694929099989795939161012088019a600089016136da919052565b602088016136e7916102cc565b60408701526060860152608085015260a084015260c083015260e08201526101000152565b61324661371960036108e9565b61372283610a18565b9061323a61373260208601610a2c565b9461373f60408201610a2c565b9061374c60608201610a2c565b61375860808301610a2c565b61376460a08401610a2c565b9161377660e0610b3360c08701610a2c565b9461378060405190565b9a8b9960208b01998a6136be565b9081526060810193926101a8929091604091610ab29060208301906107eb565b6132466137bb60026108e9565b916137ca6020612c6683610a22565b9261323a6137d760405190565b94859360208501938461378e565b610ab26101a89461380e606094989795613804608086019a6000870152565b60208501906102cc565b6040830152565b61324661382260056108e9565b61382b83610a18565b9061323a61384060406136a660208801610a2c565b6040519586946020860194856137e5565b61386c929361185b926115b592613866600090565b506143c9565b1490565b90939293848311610196578411610196578101920390565b359060208110613896575090565b6138a890600019906020036008021b90565b1690565b6101837f649264926492649264926492649264926492649264926492649264926492649261021e565b906101a86138e260405190565b9283610a56565b6001600160401b038111610a7757602090601f01601f19160190565b90826000939282370152565b90929192613926613921826138e9565b6138d5565b9381855281830111610196576101a8916020850190613905565b610183913691613911565b9080601f830112156101965781602061018393359101613911565b916060838303126101965761397b828461019b565b9260208101356001600160401b038111610196578361399b91830161394b565b9260408201356001600160401b03811161019657610183920161394b565b906139c6613921836138e9565b918252565b3d156139e5576139da3d6139b9565b903d6000602084013e565b606090565b60005b8381106139fd5750506000910152565b81810151838201526020016139ed565b613a2e613a37602093612d2b93613a22815190565b80835293849260200190565b958691016139ea565b601f01601f191690565b602080825261018392910190613a0d565b6001600160e01b0319811661018f565b905051906101a882613a52565b906020828203126101965761018391613a62565b90815260406020820181905261018392910190613a0d565b613ab4613aae6101839263ffffffff1690565b60e01b90565b6001600160e01b03191690565b90613acd606092614485565b9380602093613af2613aec83613ae56126fb8961021e565b868a613870565b90613888565b613b0061185b6101836138ac565b03613c9657613b3b61040f613b29613b4d94613b4394613b1e600090565b505061187e8961021e565b613b33600061021e565b80968a613870565b810190613966565b93909290916101fd565b90843b14613c4a575b50505b813b613b6861185b600061021e565b11613b8657506101a893604084359385013594013560f81c91614540565b82949350613b9a610b5a613bc494936101fd565b631626ba7e94613ba960405190565b809581948293613bb98a60e01b90565b845260048401613a83565b03915afa928315610cac57600093613c0f575b5050613be8613ab4613bf692613a9b565b916001600160e01b03191690565b03613bfd57565b604051638baa579f60e01b8152600490fd5b613bf6929350613c3b613be89282613ab493903d10613c43575b613c338183610a56565b810190613a6f565b939250613bd7565b503d613c29565b816000929183878194519301915af1613c69613c646139cb565b911590565b613c735780613b56565b61099490613c8060405190565b639d0d6e2d60e01b815291829160048301613a41565b5050613ca29084613940565b613b59565b60196010600f600c600d600195613ccd816c08a92a06e626488dedac2d2dc5609b1b9052565b01613ce6816b1cdd1c9a5b99c81b985b594b60a21b9052565b01613d02816e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b9052565b01613d1f816f1d5a5b9d0c8d4d8818da185a5b92590b60821b9052565b01613d4581781859191c995cdcc81d995c9a599e5a5b99d0dbdb9d1c9858dd603a1b9052565b01612d2b81602960f81b9052565b604051906101a88260208101613d6881613ca7565b90810382520383610a56565b60126013600f600b600194613d96816a086ded8d8c2e8cae4c2d8560ab1b9052565b01613db2816e1d5a5b9d0e0818dc9a5d195c9a584b608a1b9052565b01613dd281721859191c995cdcc818dbdb1b1958dd1a5bdb8b606a1b9052565b01613d4581713ab4b73a191a9b1034b232b73a34b334b2b960711b9052565b604051906101a88260208101613d6881613d74565b600c60126009600193613e24816808ccacaa8cae4dae6560bb1b9052565b01613e4381711859191c995cdcc81c9958da5c1a595b9d0b60721b9052565b01613d45816b75696e74323536207261746560a01b9052565b604051906101a88260208101613d6881613e06565b601360116014600d601280600f8581600199613e9e816e098dec2dc9ecccccae4a8cae4dae65608b1b9052565b01613ebc81701859191c995cdcc818dd5c9c995b98de4b607a1b9052565b01613ed8816e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b9052565b01613ef781711d5a5b9d0c8d4d881b585e105b5bdd5b9d0b60721b9052565b01613f1681711d5a5b9d0c8d4d881b5a5b905b5bdd5b9d0b60721b9052565b01613f30816c1d5a5b9d0c8d4d881c985d194b609a1b9052565b01613f5181731d5a5b9d0c8d4d88191959985d5b1d14985d194b60621b9052565b01613f6f81701d5a5b9d0c8d4d88191d5c985d1a5bdb8b607a1b9052565b01613d4581721d5a5b9d0c8d4d8819dc9858d954195c9a5bd9606a1b9052565b604051906101a88260208101613d6881613e71565b612d2b613fbc92602092613fb6815190565b94859290565b938491016139ea565b91614143614143926001600d8060138160156016600e80600b6101839f9e81600a8092613ffe8169098dec2dc9ecccccae4560b31b9052565b01614016816a1d5a5b9d0e081ada5b990b60aa1b9052565b0161402d8169189bdbdb081cdbd99d0b60b21b9052565b01614045816a1d5a5b9d0e081cda59194b60aa1b9052565b01614060816d1859191c995cdcc81b585ad95c8b60921b9052565b0161407b816d1859191c995cdcc81d185ad95c8b60921b9052565b0161409e817510dbdb1b185d195c985b0818dbdb1b185d195c985b0b60521b9052565b016140c08174131bd85b93d999995c95195c9b5cc81d195c9b5ccb605a1b9052565b016140da816c11995955195c9b5cc81999594b609a1b9052565b016140fa81721d5a5b9d0c8d4d88195e1c1a5c985d1a5bdb8b606a1b9052565b01614114816c1d5a5b9d0c8d4d881cd85b1d0b609a1b9052565b0161412e816c75696e74323536206e6f6e636560981b9052565b0161413c81602960f81b9052565b0190613fa4565b90613fa4565b906101a891939293613d6861415d60405190565b958693602085019384613fc5565b600e600f601180600194614192817009ac2e4d6cae89ecccccae4a8cae4dae65607b1b9052565b016141b081701859191c995cdcc818dd5c9c995b98de4b607a1b9052565b016141cc816e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b9052565b01613d45816d75696e743235362072656261746560901b9052565b604051906101a88260208101613d688161416b565b91614143614143926001600d8060138160176016600e80600b6101839f9e81600c600a92614238816b09ac2e4d6cae89ecccccae4560a31b9052565b01614250816a1d5a5b9d0e081ada5b990b60aa1b9052565b016142678169189bdbdb081cdbd99d0b60b21b9052565b0161427f816a1d5a5b9d0e081cda59194b60aa1b9052565b0161429a816d1859191c995cdcc81b585ad95c8b60921b9052565b016142b5816d1859191c995cdcc81d185ad95c8b60921b9052565b016142d8817510dbdb1b185d195c985b0818dbdb1b185d195c985b0b60521b9052565b016140c0817613585c9ad95d13d999995c95195c9b5cc81d195c9b5ccb604a1b9052565b906101a891939293613d6861431060405190565b9586936020850193846141fc565b614326613d53565b614331613251825190565b209061433b613df1565b805160208201209161434b613e5c565b805160208201209261435b613f8f565b9261324661437761436a865190565b6020870120958585614149565b614382613251825190565b209361438c6141e7565b90614395825190565b6020830120946142fc565b6101837ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00611e18565b6143d3600061021e565b925b82841015614405576143f86143ff916143f261136a87878761132d565b906145f6565b9360010190565b926143d5565b9250505090565b61441660066139b9565b654b6574746c6560d01b602082015290565b61018361440c565b610183614428565b61444260016139b9565b603160f81b602082015290565b610183614438565b61018361444f565b61447261446c6101839290565b60f01b90565b6001600160f01b03191690565b01918252565b6132466144c961449560006108e9565b6144a0610183614430565b6144ab613251825190565b206144b7610183614457565b6144c2613251825190565b209161465c565b6144d461190161445f565b61323a6144e060405190565b9485936020850193846020939261447f60028361447f8895612d2b976001600160f01b0319169052565b611e126101836101839290565b610ab26101a89461380e606094989795614536608086019a6000870152565b60ff166020850152565b93919061454d601b61450a565b60ff83161415806145e0575b6145ce5761457860009360209561456f60405190565b94859485614517565b838052039060015afa15610cac576000519061459c6145976000611d9b565b610177565b6145a583610177565b149182156145b6575b5050613bfd57565b6145c5919250611dd390610177565b141538806145ae565b604051630424f48960e41b8152600490fd5b506145eb601c61450a565b60ff83161415614559565b81811015614611579061018391600052602052604060002090565b61018391600052602052604060002090565b909594926101a89461464e6146559261464760809661104360a088019c6000890152565b6040850152565b6060830152565b01906107eb565b916132469161323a61466d306101fd565b604051958694602086019446928661462356fea2646970667358221220c002fc5a02480a2cfdd066552bb90335472e4d00cba6c42b458f85c66fed4c0764736f6c63430008180033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CannotTakeHardOffer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CannotTakeSoftOffer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CollectionMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CurrencyMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "err";
            readonly type: "bytes";
        }];
        readonly name: "ERC6492DeployFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientAskAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientOffer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCriteria";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLoanAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLoanOffer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidMarketOffer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidVParameter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MakerIsNotBorrower";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MathOverflowedMulDiv";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OfferExpired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OfferUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TakerIsNotBorrower";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }];
        readonly name: "NonceIncremented";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "salt";
            readonly type: "uint256";
        }];
        readonly name: "OfferCancelled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferStarted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "conduitController";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "lendingController";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "escrowController";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "__Kettle_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "offerHash";
            readonly type: "bytes32";
        }];
        readonly name: "amountTaken";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "salts";
            readonly type: "uint256[]";
        }];
        readonly name: "cancelOffers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "salts";
            readonly type: "uint256[]";
        }];
        readonly name: "cancelOffersForUser";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "cancelledOrFulfilled";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "conduit";
        readonly outputs: readonly [{
            readonly internalType: "contract ITransferConduit";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "escrow";
        readonly outputs: readonly [{
            readonly internalType: "contract EscrowController";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "placeholder";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rebate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MarketOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MarketOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "escrowMarketOffer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "escrowId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "maxAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "minAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "defaultRate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "duration";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "gracePeriod";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct LoanOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LoanOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "fulfillLoanOffer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "lienId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "lienId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "borrower";
                readonly type: "address";
            }, {
                readonly internalType: "contract IERC721";
                readonly name: "collection";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "tokenId";
                readonly type: "uint256";
            }, {
                readonly internalType: "contract IERC20";
                readonly name: "currency";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "principal";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rate";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "defaultRate";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "duration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gracePeriod";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "recipient";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "fee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "startTime";
                readonly type: "uint256";
            }];
            readonly internalType: "struct Lien";
            readonly name: "lien";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "maxAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "minAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "defaultRate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "duration";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "gracePeriod";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct LoanOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LoanOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "fulfillLoanOfferInLien";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newLienId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rebate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MarketOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MarketOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "fulfillMarketOffer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "netAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "lienId";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "borrower";
                readonly type: "address";
            }, {
                readonly internalType: "contract IERC721";
                readonly name: "collection";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "tokenId";
                readonly type: "uint256";
            }, {
                readonly internalType: "contract IERC20";
                readonly name: "currency";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "principal";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rate";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "defaultRate";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "duration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gracePeriod";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "recipient";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "fee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "startTime";
                readonly type: "uint256";
            }];
            readonly internalType: "struct Lien";
            readonly name: "lien";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rebate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MarketOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MarketOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "fulfillMarketOfferInLien";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "netAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "maxAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "minAmount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "defaultRate";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "duration";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "gracePeriod";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct LoanOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LoanOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }];
        readonly name: "hashLoanOffer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum OfferKind";
                readonly name: "kind";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "soft";
                readonly type: "bool";
            }, {
                readonly internalType: "enum Side";
                readonly name: "side";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "maker";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "taker";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum Criteria";
                    readonly name: "criteria";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "contract IERC721";
                    readonly name: "collection";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "identifier";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Collateral";
                readonly name: "collateral";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "contract IERC20";
                    readonly name: "currency";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rebate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MarketOfferTerms";
                readonly name: "terms";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "recipient";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rate";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct FeeTerms";
                readonly name: "fee";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "salt";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MarketOffer";
            readonly name: "offer";
            readonly type: "tuple";
        }];
        readonly name: "hashMarketOffer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "incrementNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lending";
        readonly outputs: readonly [{
            readonly internalType: "contract ILendingController";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): KettleInterface;
    static connect(address: string, runner?: ContractRunner | null): Kettle;
}
export {};
